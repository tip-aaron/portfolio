---
import siteData from "@/data/siteData.json";
import { generateJsonLd } from "@/lib/seo/schema";
import type { ImageMetadata } from "astro";

interface Props {
  title?: string;
  description?: string;
  image?: ImageMetadata;
}

const canonicalUrl = new URL(Astro.url.pathname, Astro.site);
const jsonLD = generateJsonLd({
  type: "page",
});

const {
  title = siteData.title,
  description = siteData.description,
  image,
} = Astro.props;
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />

<link rel="sitemap" href="/sitemap-index.xml" />
<link
  rel="alternate"
  type="application/rss+xml"
  title={siteData.title}
  href={new URL("rss.xml", Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<link rel="canonical" href={canonicalUrl} />

<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />

{
  image && (
    <>
      <meta property="og:image" content={new URL(image.src, Astro.site)} />
      <meta property="og:image:width" content={image.width.toString()} />
      <meta property="og:image:height" content={image.height.toString()} />
    </>
  )
}

{
  image ? (
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:image" content={new URL(image.src, Astro.site)} />
  ) : (
    <meta property="twitter:card" content="summary" />
  )
}
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />

<Fragment set:html={jsonLD} />
